#include "imports/stdlib.fc";

(int, int, slice, int) load_data() inline {
    slice ds = get_data().begin_parse();
    return (ds~load_uint(256), ds~load_uint(32), ds~load_msg_addr(), ds.preload_uint(32));
}

() store_data(int public_key, int execution_time, slice receiver, int seqno) impure inline {
    set_data(
        begin_cell()
            .store_uint(public_key, 256)
            .store_uint(execution_time, 32)
            .store_slice(receiver)
            .store_uint(seqno, 32)
            .end_cell()
    );
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }

    (int public_key, int execution_time, slice receiver, int seqno) = load_data();
    
    int op = in_msg_body~load_uint(32);
    if (op == 0x9df10277) {
        slice signature = in_msg_body~load_bits(512);
        cell ref = in_msg_body.preload_ref();
        slice rs = ref.begin_parse();
        int locked_for = rs~load_uint(32);
        int new_seqno = rs.preload_uint(32);

        throw_if(119, new_seqno != seqno + 1);
        throw_unless(120, check_signature(cell_hash(in_msg_full), signature, public_key));
        throw_if(121, locked_for <= 0);
        throw_if(122, execution_time < now());
        throw_if(123, now() + locked_for < execution_time);

        store_data(public_key, now() + locked_for, receiver, new_seqno);
    } elseif (op == 0xbb4be234) {
        throw_if(124, now() < execution_time);

        send_raw_message(
            begin_cell()
                .store_uint(0x10, 6)
                .store_slice(receiver)
                .end_cell(),
            128
        );
    }
}

int get_seqno() method_id {
    slice ds = get_data().begin_parse();
    ds~skip_bits(256 + 32);
    ds~load_msg_addr();
    return ds.preload_uint(32);
}

int get_execution_time() method_id {
    slice ds = get_data().begin_parse();
    ds~skip_bits(256);
    return ds.preload_uint(32);
}
