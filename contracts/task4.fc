#include "imports/stdlib.fc";

forall X -> (tuple) to_tuple (X x) asm "NOP";
forall X -> (tuple, ()) set_at(tuple t, X value, int index) asm "SETINDEXVAR";
(cell, (int, slice, int)) udict_rem_min(cell dict, int key_len) asm(-> 0 2 1 3) "DICTUREMMIN";

() recv_internal() impure {
    
}

(int, int, int, tuple) solve(int n, int m, tuple maze) method_id {
    cell unvis = new_dict();
    tuple info = empty_tuple();
    int si = 0;
    int sj = 0;
    int i = 0;
    while (i < n) {
        tuple maze_row = maze.at(i);
        tuple info_row = empty_tuple();
        int j = 0;
        while (j < m) {
            int x = maze_row.at(j);
            if (x == "E"u) {
                si = i;
                sj = j;
                unvis~udict_set_builder(40, i * 31 + j, begin_cell());
                info_row~tpush(begin_cell().store_uint(0, 30).end_cell().begin_parse());
            } else {
                info_row~tpush(begin_cell().store_uint(961 * 961 * 961, 30).end_cell().begin_parse());
            }
            j += 1;
        }
        info~tpush(info_row);
        i += 1;
    }
    
    tuple deltas = to_tuple([[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]]);
    int i = 0;
    int j = 0;
    do {
        (int key, _, _) = unvis~udict_rem_min(40);
        (i, j) = divmod(key, 31);
        i %= 31;

        int idx = 0;
        while (idx < 8) {
            (int di, int dj) = deltas.at(idx).unpair();
            int ni = i + di;
            int nj = j + dj;
            if ((ni >= 0) & (ni < n) & (nj >= 0) & (nj < m)) {
                int x = maze.at(ni).at(nj);
                int nkey = key + 961 + di * 31 + dj;
                if (x == "?"u) {
                    nkey += 961 * 31 * 31;
                } elseif (x == "X"u) {
                    nkey += 961 * 961 * 31 * 31;
                }
                slice s = info.at(ni).at(nj);
                int oldkey = s.preload_uint(30) * 961 + ni * 31 + nj;
                if (nkey < oldkey) {
                    unvis~udict_delete?(40, oldkey);
                    unvis~udict_set_builder(40, nkey, begin_cell());
                    tuple info_row = info.at(ni);
                    info_row~set_at(begin_cell().store_uint(nkey / 961, 30).store_uint(i, 5).store_uint(j, 5).end_cell().begin_parse(), nj);
                    info~set_at(info_row, ni);
                }
            }
            idx += 1;
        }
    } until (maze.at(i).at(j) == "S"u);

    slice s = info.at(i).at(j);
    int key = s~load_uint(30);
    i = s~load_uint(5);
    j = s.preload_uint(5);
    
    while (maze.at(i).at(j) != "E"u) {
        tuple maze_row = maze.at(i);
        maze_row~set_at("!"u, j);
        maze~set_at(maze_row, i);

        slice s = info.at(i).at(j);
        s~skip_bits(30);
        i = s~load_uint(5);
        j = s.preload_uint(5);
    };

    return (key / 923521, key / 961 % 961, key % 961, maze);
}