#include "imports/stdlib.fc";

forall X -> tuple set_at(tuple t, X value, int index) asm "SETINDEXVAR";
forall X -> (tuple, ()) ~set_at(tuple t, X value, int index) asm "SETINDEXVAR";
(cell, (int, slice, int)) udict_rem_min(cell dict, int key_len) asm(-> 0 2 1 3) "DICTUREMMIN";

() recv_internal() impure {
    
}

(cell, tuple) push(tuple maze, cell unvis, tuple info, int i, int j, int key, int ni, int nj) inline {
    int x = maze.at(ni).at(nj);
    if (x == "?"u) {
        key += 923521;
    } elseif (x == "X"u) {
        key += 887503681;
    }
    int oldkey = info.at(ni).at(nj).at(0);
    if (key < oldkey) {
        unvis~udict_delete?(40, oldkey);
        unvis~udict_set_builder(40, key, begin_cell());
        info~set_at(info.at(ni).set_at(triple(key, i, j), nj), ni);
    }
    return (unvis, info);
}

(int, int, int, tuple) solve(int n, int m, tuple maze) method_id {
    ;;set_gas_limit(10000000000);
    cell unvis = new_dict();
    tuple info = empty_tuple();
    int si = 0;
    int sj = 0;
    int i = 0;
    while (i < n) {
        tuple maze_row = maze.at(i);
        tuple info_row = empty_tuple();
        int j = 0;
        while (j < m) {
            int x = maze_row.at(j);
            if (x == "E"u) {
                si = i;
                sj = j;
                unvis~udict_set_builder(40, i * 31 + j, begin_cell());
                info_row~tpush(single(i * 31 + j));
            } else {
                info_row~tpush(single(852891037441));
            }
            j += 1;
        }
        info~tpush(info_row);
        i += 1;
    }
    
    int i = 0;
    int j = 0;
    do {
        (int key, _, _) = unvis~udict_rem_min(40);
        (i, j) = divmod(key, 31);
        i %= 31;
        key += 961;

        if (i > 0) {
            if (j > 0) {
                (unvis, info) = push(maze, unvis, info, i, j, key - 32, i - 1, j - 1);
            }
            (unvis, info) = push(maze, unvis, info, i, j, key - 31, i - 1, j);
            if (j + 1 < m) {
                (unvis, info) = push(maze, unvis, info, i, j, key - 30, i - 1, j + 1);
            }
        }
        if (j > 0) {
            (unvis, info) = push(maze, unvis, info, i, j, key - 1, i, j - 1);
        }
        if (j + 1 < m) {
            (unvis, info) = push(maze, unvis, info, i, j, key + 1, i, j + 1);
        }
        if (i + 1 < n) {
            int nkey = key + 31;
            if (j > 0) {
                (unvis, info) = push(maze, unvis, info, i, j, key + 30, i + 1, j - 1);
            }
            (unvis, info) = push(maze, unvis, info, i, j, key + 31, i + 1, j);
            if (j + 1 < m) {
                (unvis, info) = push(maze, unvis, info, i, j, key + 32, i + 1, j + 1);
            }
        }
    } until (maze.at(i).at(j) == "S"u);

    (int key, i, j) = info.at(i).at(j).untriple();
    key /= 961;
    
    while (maze.at(i).at(j) != "E"u) {
        maze~set_at(maze.at(i).set_at("!"u, j), i);
        (_, i, j) = info.at(i).at(j).untriple();
    };

    return (key / 923521, key / 961 % 961, key % 961, maze);
}