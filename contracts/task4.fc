#include "imports/stdlib.fc";

forall X -> (tuple) to_tuple (X x) asm "NOP";

() recv_internal() impure {
    
}

(int, int, int, tuple) solve(int n, int m, tuple maze) method_id {
    int si = 0;
    int sj = 0;
    int ei = 0;
    int ej = 0;
    int i = 0;
    while (i < n) {
        tuple row = maze.at(i);
        int j = 0;
        while (j < m) {
            int x = row.at(j);
            if (x == "S"u) {
                si = i;
                sj = j;
            } elseif (x == "E"u) {
                ei = i;
                ej = j;
            }
            j += 1;
        }
        i += 1;
    }
    
    tuple list = cons(tuple4(si, sj, 0, 0), null());
    cell info = new_dict();
    info~udict_set_builder(10, si * 31 + sj, begin_cell().store_uint(0, 30));

    tuple deltas = to_tuple([[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]]);
    do {
        tuple new_list = null();
        do {
            (int i, int j, int k, int l) = untuple4(list~list_next());
            (slice s, _) = info.udict_get?(10, i * 31 + j);
            int sup = s~load_uint(10);
            int obs = s.preload_uint(10);
            if ((k == sup) & (l == obs)) {
                int idx = 0;
                while (idx < 8) {
                    (int di, int dj) = unpair(deltas.at(idx));
                    int ni = i + di;
                    int nj = j + dj;
                    if ((ni >= 0) & (ni < n) & (nj >= 0) & (nj < m)) {
                        int x = maze.at(ni).at(nj);
                        int nk = k;
                        int nl = l;
                        if (x == "?"u) {
                            nk += 1;
                        } elseif (x == "X"u) {
                            nl += 1;
                        }
                        int index = ni * 31 + nj;
                        (slice s, int success) = info.udict_get?(10, index);
                        int flag = 0;
                        if (success) {
                            int sup = s~load_uint(10);
                            int obs = s.preload_uint(10);
                            flag = (nl < obs) | ((nl == obs) & (nk < sup));
                        } else {
                            flag = -1;
                        }
                        if (flag) {
                            new_list = cons(tuple4(ni, nj, nk, nl), new_list);
                            info~udict_set_builder(10, index,
                                begin_cell().store_uint(nk, 10).store_uint(nl, 10).store_uint(i, 5).store_uint(j, 5));
                        }
                    }
                    idx += 1;
                }
            }
        } until (list.null?());
        list = new_list;
    } until (list.null?());

    cell ans_dict = new_dict();

    int i = ei;
    int j = ej;
    int length = 0;
    do {
        ans_dict~udict_set_builder(10, i * 31 + j, begin_cell().store_uint(1, 1));

        (slice s, _) = info.udict_get?(10, i * 31 + j);
        s~skip_bits(20);
        i = s~load_uint(5);
        j = s.preload_uint(5);

        length += 1;
    } until (maze.at(i).at(j) == "S"u);
    ans_dict~udict_delete?(10, ei * 31 + ej);

    tuple ans = empty_tuple();
    int i = 0;
    while (i < n) {
        tuple maze_row = maze.at(i);
        tuple row = empty_tuple();
        int j = 0;
        while (j < m) {
            (_, int success) = ans_dict.udict_get?(10, i * 31 + j);
            row~tpush(success ? "!"u : maze_row.at(j));
            j += 1;
        }
        ans~tpush(row);
        i += 1;
    }

    (slice s, _) = info.udict_get?(10, ei * 31 + ej);
    int sup = s~load_uint(10);
    int obs = s.preload_uint(10);
    return (obs, sup, length, ans);
}