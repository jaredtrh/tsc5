#include "imports/stdlib.fc";

int slices_equal?(slice a, slice b) asm "SDEQ";
(slice, int) dict_get?(cell dict, int key_len, slice index) asm(index dict key_len) "DICTGET" "NULLSWAPIFNOT";
(cell, int) dict_delete?(cell dict, int key_len, slice index) asm(index dict key_len) "DICTDEL";
(slice, slice, int) dict_get_min?(cell dict, int key_len) asm (-> 1 0 2) "DICTMIN" "NULLSWAPIFNOT2";
(slice, slice, int) dict_get_next?(cell dict, int key_len, slice pivot) asm(pivot dict key_len -> 1 0 2) "DICTGETNEXT" "NULLSWAPIFNOT2";

(slice, cell, int) load_data() inline {
    slice ds = get_data().begin_parse();
    return (ds~load_msg_addr(), ds~load_dict(), ~ ds.slice_empty?() ? ds.preload_uint(32) : 0);
}

() store_data(slice admin_address, cell users, int total_share) impure inline {
    set_data(
        begin_cell()
            .store_slice(admin_address)
            .store_dict(users)
            .store_uint(total_share, 32)
            .end_cell()
    );
}

slice load_sender_addr(cell in_msg) inline {
    slice cs = in_msg.begin_parse().skip_bits(4);
    return cs~load_msg_addr();
}

() recv_internal(cell in_msg, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }

    (slice admin_address, cell users, int total_share) = load_data();
    slice sender_address = load_sender_addr(in_msg);
    
    int op = in_msg_body~load_uint(32);
    in_msg_body~skip_bits(64);
    if (op == 0x368ddef3) {
        throw_unless(120, slices_equal?(sender_address, admin_address));

        slice address = in_msg_body~load_msg_addr();
        int share = in_msg_body.preload_uint(32);
        ~dump(address.slice_bits());
        
        (slice us, int success) = users.dict_get?(267, address);

        store_data(
            admin_address,
            users.dict_set_builder(267, address, begin_cell().store_uint(share, 32)),
            (success ? total_share - us~load_uint(32) : total_share) + share
        );
    } elseif (op == 0x278205c8) {
        throw_unless(120, slices_equal?(sender_address, admin_address));

        slice address = in_msg_body~load_msg_addr();

        throw_unless(121, users~dict_delete?(267, address));
    } elseif (op == 0x068530b3) {
        int amount = in_msg_body~load_coins();

        (slice key, slice val, int flag) = users.dict_get_min?(267);
        throw_unless(122, flag);
        do {
            send_raw_message(
                begin_cell()
                    .store_uint(0x10, 6)
                    .store_slice(key)
                    .store_coins(val~load_uint(32) * amount / total_share)
                    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                    .end_cell(),
                1
            );
            ~dump(key);
            (key, val, flag) = users.dict_get_next?(267, key);
        } until (~ flag);
    } else {

    }
}

cell get_users() method_id {
    slice ds = get_data().begin_parse();
    ds~load_msg_addr();
    return ds.preload_dict();
}

int get_user_share(slice user_address) method_id {
    (slice s, _) = get_users().dict_get?(267, user_address);
    return s.preload_uint(32);
}